@using Newtonsoft.Json
@model CategoryViewModel

<div class="card shadow-sm border-0 rounded">
    <div class="card-header bg-primary border-bottom">
        <h4 class="card-title text-white mb-0">@ViewBag.Title</h4>
    </div>
    <div class="card-body">
        <form asp-action="Save" asp-controller="Category" method="post" class="needs-validation" novalidate>
            @Html.AntiForgeryToken()
            <input type="hidden" name="Id" value="@Model.Id" />

            <!-- Validation Summary -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Lỗi!</strong> Vui lòng kiểm tra lại các thông tin bên dưới.
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                @Html.ValidationSummary(false, "", new { @class = "alert alert-danger" })
            }

            <!-- Loại khoản -->
            <div class="row mb-3">
                <label for="Type" class="col-sm-3 col-form-label fw-bold text-nowrap">
                    Loại khoản <span class="text-danger">*</span>:
                </label>
                <div class="col-sm-9">
                    <select id="TypeSelect" class="form-select fw-bold ps-2 border" name="Type" required>
                        <option value="1" class="text-success" selected="@(Model.Type == IncomeExpenseType.Income ? "selected" : null)">Khoản thu</option>
                        <option value="2" class="text-primary" selected="@(Model.Type == IncomeExpenseType.Expense ? "selected" : null)">Khoản chi</option>
                    </select>
                    @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger mt-1" })
                </div>
            </div>

            <!-- Tên danh mục -->
            <div class="row mb-3">
                <label for="Name" class="col-sm-3 col-form-label fw-bold text-nowrap">
                    Tên danh mục <span class="text-danger">*</span>:
                </label>
                <div class="col-sm-9">
                    <input type="text" id="Name" name="Name" value="@Model.Name" class="form-control ps-2 border" placeholder="Tên danh mục" required autofocus />
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger mt-1" })
                </div>
            </div>

            <!-- Mô tả -->
            <div class="row mb-3">
                <label for="Text" class="col-sm-3 col-form-label fw-bold text-nowrap">
                    Mô tả:
                </label>
                <div class="col-sm-9">
                    <input type="text" id="Text" name="Text" value="@Model.Text" class="form-control ps-2 border" placeholder="Ghi chú" />
                    @Html.ValidationMessageFor(m => m.Text, "", new { @class = "text-danger mt-1" })
                </div>
            </div>

            <!-- Thứ tự hiển thị -->
            <div class="row mb-3">
                <label for="Order" class="col-sm-3 col-form-label fw-bold text-nowrap">
                    Thứ tự hiển thị <span class="text-danger">*</span>:
                </label>
                <div class="col-sm-9">
                    <input type="number" id="Order" name="Order" value="@Model.Order" class="form-control ps-2 border" placeholder="Thứ tự hiển thị" />
                    @Html.ValidationMessageFor(m => m.Order, "", new { @class = "text-danger mt-1" })
                </div>
            </div>

            <!-- Icon và màu -->
            <div class="row mb-4">
                <label class="col-sm-3 col-form-label fw-bold text-nowrap">
                    Tùy chỉnh hiển thị icon màu sắc<span class="text-danger">*</span>:
                </label>
                <div class="col-sm-9 d-flex gap-3 flex-wrap">
                    <div class="input-group icon-color-group flex-grow-1" style="max-width: 140px;">
                        <span class="input-group-text" id="selectedIcon" style="font-size: 18px;"></span>
                        <select id="IconSelect" asp-for="Icon" class="form-select icon-select ps-2 fw-bold" aria-label="Chọn icon" style="font-size: 16px;"></select>
                    </div>
                    <div class="input-group icon-color-group flex-grow-1" style="max-width: 140px;">
                        <span class="input-group-text p-1">
                            <div id="colorPreview" style="width: 24px; height: 24px; border-radius: 4px; border: 1px solid #ccc;"></div>
                        </span>
                        @Html.DropDownListFor(m => m.Color, (IEnumerable<SelectListItem>)ViewBag.ColorList, new {
                        @class = "form-select fw-bold",
                                                aria_label = "Chọn màu sắc",
                                                style = "font-size: 16px;"
                                                })
                    </div>
                </div>
                <div class="col-sm-9 offset-sm-3 mt-1">
                    @Html.ValidationMessageFor(m => m.Icon, "", new { @class = "text-danger me-3" })
                    @Html.ValidationMessageFor(m => m.Color, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Nút -->
            <div class="row mb-0">
                <div class="col-sm-9 offset-sm-3 d-flex gap-2">
                    <button type="submit" class="btn btn-primary d-flex align-items-center gap-1">
                        <i class="fas fa-save"></i> Lưu dữ liệu
                    </button>
                    <a href="~/Category" class="btn btn-secondary d-flex align-items-center gap-1">
                        <i class="fas fa-arrow-left"></i> Quay lại
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>


<style>
    .icon-select {
        font-family: 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', sans-serif;
        font-size: 20px;
        padding: 6px 8px;
    }

        .icon-select option {
            font-family: 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', sans-serif;
            font-size: 20px;
            padding: 6px 8px;
        }

    .icon-color-group {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        overflow: hidden;
        display: flex;
        align-items: center;
    }

        .icon-color-group .input-group-text {
            background-color: #f8f9fa;
            border: none;
            border-right: 1px solid #ced4da;
            padding: 0 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 48px;
        }

        .icon-color-group .form-select {
            border: none;
            padding-left: 0.5rem;
        }

    .card-title {
        font-weight: 600;
    }
</style>

@section Scripts {
    <script>
        const iconLists = {
            '@((int)IncomeExpenseType.Income)': @Html.Raw(JsonConvert.SerializeObject(ViewBag.IconIncomeList)),
            '@((int)IncomeExpenseType.Expense)': @Html.Raw(JsonConvert.SerializeObject(ViewBag.IconExpenseList))
        };

        function updateIconPreview(icon) {
            const selectedIcon = document.getElementById('selectedIcon');
            selectedIcon.textContent = icon || '';
        }

        function updateColorPreview(color) {
            const colorPreview = document.getElementById('colorPreview');
            colorPreview.style.backgroundColor = color || 'transparent';
        }

        function populateIcons(typeValue) {
            const iconSelect = document.getElementById('IconSelect');
            iconSelect.innerHTML = '';
            const list = iconLists[typeValue] || [];

            // Model.Icon có thể chứa emoji trực tiếp rồi, không cần convert HTML entity
            const modelIcon = '@Model.Icon';

            list.forEach(item => {
                const option = document.createElement('option');
                option.value = item.Icon;
                option.textContent = `${item.Icon} ${item.Name}`;
                if (item.Icon === modelIcon) {
                    option.selected = true;
                }
                iconSelect.appendChild(option);
            });

            updateIconPreview(iconSelect.value);
        }

        document.getElementById('TypeSelect').addEventListener('change', e => {
            populateIcons(e.target.value);
        });

        document.getElementById('IconSelect').addEventListener('change', e => {
            updateIconPreview(e.target.value);
        });

        document.getElementById('Color').addEventListener('change', e => {
            updateColorPreview(e.target.value);
        });

        document.addEventListener('DOMContentLoaded', () => {
            const typeSelect = document.getElementById('TypeSelect');
            populateIcons(typeSelect.value);
            updateColorPreview(document.getElementById('Color').value);
        });

        $(document).ready(function () {
            function updateSelectColor() {
                const type = $('#TypeSelect').val();
                const $select = $('#TypeSelect');

                // Xóa các class màu cũ
                $select.removeClass('text-success text-primary');

                // Thêm class mới tương ứng giá trị
                if (type === '1') {
                    $select.addClass('text-success'); // Khoản thu
                } else if (type === '2') {
                    $select.addClass('text-primary'); // Khoản chi
                }
            }

            // Gọi hàm khi trang load và khi thay đổi
            updateSelectColor();
            $('#TypeSelect').on('change', updateSelectColor);

            // Client-side validation
            $('form').on('submit', function(e) {
                let isValid = true;

                // Kiểm tra tên danh mục
                const name = $('#Name').val().trim();
                if (!name) {
                    $('#Name').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#Name').removeClass('is-invalid').addClass('is-valid');
                }

                // Kiểm tra icon
                const icon = $('#IconSelect').val();
                if (!icon) {
                    $('#IconSelect').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#IconSelect').removeClass('is-invalid').addClass('is-valid');
                }

                // Kiểm tra màu sắc
                const color = $('#Color').val();
                if (!color) {
                    $('#Color').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#Color').removeClass('is-invalid').addClass('is-valid');
                }

                // Kiểm tra thứ tự hiển thị
                const order = $('#Order').val();
                if (order < 0) {
                    $('#Order').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#Order').removeClass('is-invalid').addClass('is-valid');
                }

                if (!isValid) {
                    e.preventDefault();
                    // Hiển thị thông báo lỗi
                    if (!$('.alert-danger').length) {
                        $('.card-body').prepend('<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
                            '<strong>Lỗi!</strong> Vui lòng kiểm tra lại các thông tin bắt buộc.' +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                            '</div>');
                    }
                }
            });

            // Xóa validation khi user nhập
            $('input, select').on('input change', function() {
                $(this).removeClass('is-invalid is-valid');
            });
        });
    </script>
}
