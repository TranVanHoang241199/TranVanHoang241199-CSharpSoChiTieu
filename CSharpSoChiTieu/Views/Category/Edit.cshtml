@using CSharpSoChiTieu.common
@using Newtonsoft.Json
@model CSharpSoChiTieu.Business.Services.CategoryViewModel

<div class="card shadow-sm border-0 rounded">
    <div class="card-header bg-light border-bottom">
        <h3 class="card-title mb-0">@ViewBag.Title</h3>
    </div>
    <div class="card-body">
        <form asp-action="Save" asp-controller="Category" method="post" class="needs-validation" novalidate>
            @Html.AntiForgeryToken()
            <input type="hidden" name="Id" value="@Model.Id" />

            <div class="mb-3 form-floating">
                <input type="text" class="form-control" id="Name" name="Name" value="@Model.Name" placeholder="Tên danh mục" required autofocus />
                <label for="Name">Tên loại hàng</label>
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger mt-1" })
            </div>

            <div class="mb-3 row align-items-center">
                <label for="TypeSelect" class="col-sm-3 col-form-label mb-0">Chọn loại:</label>
                <div class="col-sm-9">
                    <select id="TypeSelect" class="form-select" name="Type" required>
                        <option value="1" selected="@(Model.Type == IncomeExpenseType.Income ? "selected" : null)">Khoản thu</option>
                        <option value="2" selected="@(Model.Type == IncomeExpenseType.Expense ? "selected" : null)">Khoản chi</option>
                    </select>
                    @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger mt-1" })
                </div>
            </div>

            <div class="mb-3 form-floating">
                <input type="text" class="form-control" id="Text" name="Text" value="@Model.Text" placeholder="Ghi chú" />
                <label for="Text">Ghi chú</label>
                @Html.ValidationMessageFor(m => m.Text, "", new { @class = "text-danger mt-1" })
            </div>

            <div class="mb-3 form-floating">
                <input type="number" class="form-control" id="Order" name="Order" value="@Model.Order" placeholder="Thứ tự hiển thị" />
                <label for="Order">Thứ tự hiển thị</label>
                @Html.ValidationMessageFor(m => m.Order, "", new { @class = "text-danger mt-1" })
            </div>

            <div class="mb-4 row align-items-center">
                <label class="col-sm-3 col-form-label mb-0">Tùy chỉnh hiển thị (icon, màu):</label>
                <div class="col-sm-9 d-flex gap-3">
                    <div class="input-group icon-color-group flex-grow-1">
                        <span class="input-group-text" style="font-size: 24px;" id="selectedIcon"></span>
                        <select id="IconSelect" asp-for="Icon" class="form-select icon-select" aria-label="Chọn icon"></select>
                    </div>
                    <div class="input-group icon-color-group" style="max-width: 140px;">
                        <span class="input-group-text" style="padding: 0.25rem;">
                            <div id="colorPreview" style="width: 24px; height: 24px; border-radius: 4px; border: 1px solid #ccc;"></div>
                        </span>
                        @Html.DropDownListFor(m => m.Color, (IEnumerable<SelectListItem>)ViewBag.ColorList, new { @class = "form-select", aria_label = "Chọn màu sắc" })
                    </div>
                </div>
                <div class="col-sm-9 offset-sm-3 mt-1">
                    @Html.ValidationMessageFor(m => m.Icon, "", new { @class = "text-danger me-3" })
                    @Html.ValidationMessageFor(m => m.Color, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-0 row">
                <div class="col-sm-9 offset-sm-3 d-flex gap-2">
                    <button type="submit" class="btn btn-primary d-flex align-items-center gap-1">
                        <i class="fas fa-save"></i> Lưu dữ liệu
                    </button>
                    <a href="~/Category" class="btn btn-secondary d-flex align-items-center gap-1">
                        <i class="fas fa-arrow-left"></i> Quay lại
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    .icon-select {
        font-family: 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', sans-serif;
        font-size: 20px;
        padding: 6px 8px;
    }
    .icon-select option {
        font-family: 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', sans-serif;
        font-size: 20px;
        padding: 6px 8px;
    }
    .icon-color-group {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        overflow: hidden;
        display: flex;
        align-items: center;
    }
    .icon-color-group .input-group-text {
        background-color: #f8f9fa;
        border: none;
        border-right: 1px solid #ced4da;
        padding: 0 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 48px;
    }
    .icon-color-group .form-select {
        border: none;
        padding-left: 0.5rem;
    }
    .card-title {
        font-weight: 600;
    }
</style>

@section Scripts {
    <script>
        const iconLists = {
            '@((int)IncomeExpenseType.Income)': @Html.Raw(JsonConvert.SerializeObject(ViewBag.IconIncomeList)),
            '@((int)IncomeExpenseType.Expense)': @Html.Raw(JsonConvert.SerializeObject(ViewBag.IconExpenseList))
        };

        function updateIconPreview(icon) {
            const selectedIcon = document.getElementById('selectedIcon');
            selectedIcon.textContent = icon || '';
        }

        function updateColorPreview(color) {
            const colorPreview = document.getElementById('colorPreview');
            colorPreview.style.backgroundColor = color || 'transparent';
        }

        function populateIcons(typeValue) {
            const iconSelect = document.getElementById('IconSelect');
            iconSelect.innerHTML = '';
            const list = iconLists[typeValue] || [];

            // Model.Icon có thể chứa emoji trực tiếp rồi, không cần convert HTML entity
            const modelIcon = '@Model.Icon';

            list.forEach(item => {
                const option = document.createElement('option');
                option.value = item.Icon;
                option.textContent = `${item.Icon} ${item.Name}`;
                if (item.Icon === modelIcon) {
                    option.selected = true;
                }
                iconSelect.appendChild(option);
            });

            updateIconPreview(iconSelect.value);
        }

        document.getElementById('TypeSelect').addEventListener('change', e => {
            populateIcons(e.target.value);
        });

        document.getElementById('IconSelect').addEventListener('change', e => {
            updateIconPreview(e.target.value);
        });

        document.getElementById('Color').addEventListener('change', e => {
            updateColorPreview(e.target.value);
        });

        document.addEventListener('DOMContentLoaded', () => {
            const typeSelect = document.getElementById('TypeSelect');
            populateIcons(typeSelect.value);
            updateColorPreview(document.getElementById('Color').value);
        });
    </script>
}
