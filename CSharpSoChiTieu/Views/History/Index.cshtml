@using CSharpSoChiTieu.Business.Services
@model CSharpSoChiTieu.Models.PaginationHistorySearchInput

@{
    var totalIncomeFormatted = ViewData["TotalIncomeFormatted"]?.ToString() ?? "0 đ";
    var totalExpenseFormatted = ViewData["TotalExpenseFormatted"]?.ToString() ?? "0 đ";
    var remainingBalanceFormatted = ViewData["RemainingBalanceFormatted"]?.ToString() ?? "0 đ";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4 shadow-lg border-0">
                <div class="card-header pb-0 bg-gradient-primary text-white">
                    <div class="row">
                        <div class="col-6 d-flex align-items-center">
                            <h6 class="mb-0 text-white font-weight-bold">Lịch sử</h6>
                        </div>
                    </div>
                </div>
                <div class="card-body px-4 pt-2 pb-2">
                    <div class="p-3">
                        <form id="formSearch" action="~/History/Search">
                            <input type="hidden" name="PageSize" value="@Model.PageSize" />
                            <div class="input-group input-group-outline mb-4">
                                <input type="text" class="form-control border-radius-lg"
                                       placeholder="Tìm kiếm danh mục..."
                                       name="searchValue" value="@Model.SearchValue" autofocus>
                                <button class="btn btn-primary mb-0 border-radius-lg" type="submit">
                                    <i class="material-symbols-rounded">search</i>
                                </button>
                            </div>
                            <div class="row g-3">
                                <!-- Chọn ngày tháng năm -->
                                <div class="col-12 col-md-6 d-flex align-items-start align-items-md-center">
                                    <div class="d-flex flex-column flex-md-row w-100 justify-content-start align-items-start align-items-md-center">
                                        @* Bộ lọc *@
                                        <div class="mb-2 mb-md-0 me-md-2 w-100 w-md-auto position-relative">
                                            <button type="button" class="btn btn-outline-primary w-100 w-md-auto" onclick="openFilterDialog()">
                                                <i class="fas fa-filter me-1"></i> Bộ lọc
                                            </button>
                                            <span id="filterBadge"
                                                  class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                                  style="display:none; font-size:0.75em;">
                                                0
                                            </span>
                                        </div>


                                        @* Đơn vị tiền tệ *@
                                        <div class="mb-2 mb-md-0 me-md-2 w-100 w-md-auto">
                                            <select id="currency-filter" name="currency" class="btn btn-outline-success w-100 w-md-auto">
                                                @if (ViewBag.Currencies != null)
                                                {
                                                    var selectedCurrency = ViewBag.SelectedCurrency as string;
                                                    foreach (var currency in (List<CurrencyViewModel>)ViewBag.Currencies)
                                                    {
                                                        <option value="@currency.Code" selected="@(currency.Code == selectedCurrency ? "selected" : null)">
                                                            @currency.Code
                                                        </option>
                                                    }
                                                }

                                            </select>
                                        </div>

                                        @* Chọn ngày tháng năm *@
                                        <div class="mb-2 mb-md-0 me-md-2 w-100 w-md-auto">
                                            <select id="yearSelect" name="year" class="btn btn-outline-success w-100 w-md-auto">
                                                <option value="">Tất cả năm</option>
                                            </select>
                                        </div>
                                        <div class="mb-2 mb-md-0 me-md-2 w-100 w-md-auto">
                                            <select id="monthSelect" name="month" class="btn btn-outline-success w-100 w-md-auto">
                                                <option value="">Tất cả tháng</option>
                                            </select>
                                        </div>
                                        <div class="w-100 w-md-auto">
                                            <select id="daySelect" name="day" class="btn btn-outline-success w-100 w-md-auto">
                                                <option value="">Tất cả ngày</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <!-- Thu Chi Còn -->
                                <div class="col-12 col-md-6 d-flex align-items-start align-items-md-center justify-content-md-end">
                                    <div class="d-flex flex-column flex-md-row w-100 justify-content-end align-items-start align-items-md-baseline" id="summary-metrics">
                                        <div class="mb-2 mb-md-0 me-md-3 d-flex align-items-baseline">
                                            <i class="fas fa-wallet text-success me-1 fs-6"></i>
                                            <span class="text-success small me-1">Thu:</span>
                                            <span class="text-success fw-bold pe-0" id="total-income">@totalIncomeFormatted</span>
                                        </div>
                                        <div class="mb-2 mb-md-0 me-md-3 d-flex align-items-baseline">
                                            <i class="fas fa-shopping-cart text-danger me-1 fs-6"></i>
                                            <span class="text-danger small me-1">Chi:</span>
                                            <span class="text-danger fw-bold pe-0" id="total-expense">@totalExpenseFormatted</span>
                                        </div>
                                        <div class="d-flex align-items-baseline">
                                            <i class="fas fa-piggy-bank text-warning me-1 fs-6"></i>
                                            <span class="text-warning small me-1">Còn:</span>
                                            <span class="text-warning fw-bold pe-0" id="remaining-balance">@remainingBalanceFormatted</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>

                </div>
            </div>
            <div id="searchResult" class="table-responsive p-0">
                <!-- Kết quả tìm kiếm sẽ được load vào đây -->
            </div>

        </div>
    </div>
</div>

<style>
    #filterBadge {
        transform: translate(-50%, -30%); /* Điều chỉnh cụ thể nếu lệch */
        z-index: 10; /* Đảm bảo hiển thị nổi bật */
    }

</style>

@section scripts {
    <script>
        var filterModal = null;

        function openFilterDialog() {
            if (!filterModal) {
                loadFilterDialog();
            } else {
                filterModal.show();
            }
        }

        function loadFilterDialog() {
            if (!$('#filterModal').length) {
                $.ajax({
                    url: '/History/FilterDialog',
                    type: 'GET',
                    success: function(data) {
                        $('body').append(data);
                        filterModal = new bootstrap.Modal(document.getElementById('filterModal'));
                        filterModal.show();
                    },
                    error: function() {
                        console.error('Không thể tải filter dialog');
                    }
                });
            } else {
                filterModal = new bootstrap.Modal(document.getElementById('filterModal'));
                filterModal.show();
            }
        }

        function updateSummaryHistory() {
            const year = $('#yearSelect').val();
            const month = $('#monthSelect').val();
            const day = $('#daySelect').val();
            const searchValue = $('input[name="searchValue"]').val();
            const currency = $('#currency-filter').val();

            // Thêm các filter mới
            const additionalParams = {};

            if ($('#filterTypeEnabled').is(':checked')) {
                additionalParams.Type = $('#typeSelect').val();
            }

            if ($('#filterAmountEnabled').is(':checked')) {
                additionalParams.AmountFrom = $('#amountFrom').val();
                additionalParams.AmountTo = $('#amountTo').val();
            }

            if ($('#filterDateEnabled').is(':checked')) {
                additionalParams.FromDate = $('#fromDate').val();
                additionalParams.ToDate = $('#toDate').val();
            }

            if ($('#filterQuickDateEnabled').is(':checked')) {
                additionalParams.QuickDate = $('#quickDateSelect').val();
            }

            const requestData = { year, month, day, searchValue, currency, ...additionalParams };

            $.ajax({
                url: '@Url.Action("GetSummary", "History")',
                type: 'GET',
                data: requestData,
                success: function (data) {
                    $("#total-income").text(data.totalIncomeFormatted);
                    $("#total-expense").text(data.totalExpenseFormatted);
                    $("#remaining-balance").text(data.remainingBalanceFormatted);
                },
                error: function () {
                    $("#total-income").text("0 đ");
                    $("#total-expense").text("0 đ");
                    $("#remaining-balance").text("0 đ");
                }
            });
        }

        function updateDaysDropdown(year, month, selectedDay) {
            const daySelect = $('#daySelect');
            daySelect.empty().append('<option value="">Tất cả ngày</option>');

            if (year && month) {
                const daysInMonth = new Date(year, month, 0).getDate();
                for (let day = 1; day <= daysInMonth; day++) {
                    const selected = selectedDay == day ? 'selected' : '';
                    if (selected)
                        daySelect.append(`<option value="${day}" ${selected}>Ngày ${day}</option>`);
                    else
                        daySelect.append(`<option value="${day}">Ngày ${day}</option>`);
                }
            }
        }

        function getAllFilterData() {
            const year = $('#yearSelect').val();
            const month = $('#monthSelect').val();
            const day = $('#daySelect').val();
            const searchValue = $('input[name="searchValue"]').val();
            const currency = $('#currency-filter').val();

            const additionalParams = {};

            if ($('#filterTypeEnabled').is(':checked')) {
                additionalParams.Type = $('#typeSelect').val();
            }
            if ($('#filterAmountEnabled').is(':checked')) {
                additionalParams.AmountFrom = $('#amountFrom').val();
                additionalParams.AmountTo = $('#amountTo').val();
            }
            if ($('#filterDateEnabled').is(':checked')) {
                additionalParams.FromDate = $('#fromDate').val();
                additionalParams.ToDate = $('#toDate').val();
            }
            if ($('#filterQuickDateEnabled').is(':checked')) {
                additionalParams.QuickDate = $('#quickDateSelect').val();
            }

            return { year, month, day, searchValue, currency, ...additionalParams };
        }

        $(document).ready(function () {
            const currentYear = new Date().getFullYear();
            const currentMonth = new Date().getMonth() + 1;
            const yearSelect = $('#yearSelect');
            const monthSelect = $('#monthSelect');

            // Khi mới đầu loading, mặc định năm và tháng là hiện tại
            let modelYear = currentYear;
            let modelMonth = currentMonth;
            let modelDay = null;

            // Nếu Model.Year hoặc Model.Month có giá trị thì dùng, không thì lấy năm/tháng hiện tại
            @* Chỉ lấy giá trị Model nếu có, còn không thì để mặc định năm/tháng hiện tại *@
            @if (Model.Year != null)
            {
                        <text>modelYear = @Model.Year;</text>
            }
            @if (Model.Month != null)
            {
                        <text>modelMonth = @Model.Month;</text>
            }
            @if (Model.Day != null)
            {
                        <text>modelDay = @Model.Day;</text>
            }

            // Fill year dropdown
            for (let year = currentYear; year >= currentYear - 10; year--) {
                const selected = (year === modelYear) ? 'selected' : '';
                yearSelect.append(`<option value="${year}" ${selected}>Năm ${year}</option>`);
            }

            // Fill month dropdown
            for (let month = 1; month <= 12; month++) {
                const selected = (month === modelMonth) ? 'selected' : '';
                monthSelect.append(`<option value="${month}" ${selected}>Tháng ${month}</option>`);
            }

            // Fill day dropdown sau khi month/year đã gán
            updateDaysDropdown(modelYear, modelMonth, modelDay);

            // Set lại giá trị cho yearSelect và monthSelect nếu chưa có (trường hợp reload không có Model)
            yearSelect.val(modelYear);
            monthSelect.val(modelMonth);

            // Sự kiện thay đổi năm hoặc tháng thì cập nhật lại dropdown ngày và reset ngày về null
            $('#yearSelect, #monthSelect').change(function () {
                const year = parseInt($('#yearSelect').val());
                const month = parseInt($('#monthSelect').val());
                updateDaysDropdown(year, month, null);

                const allFilterData = getAllFilterData();
                doSearch(1, allFilterData);
                updateSummaryHistory();
            });

            // Sự kiện thay đổi ngày thì chỉ lọc lại dữ liệu, không reset dropdown ngày
            $('#daySelect').change(function () {
                const allFilterData = getAllFilterData();
                doSearch(1, allFilterData);
                updateSummaryHistory();
            });

            // Sự kiện thay đổi tiền tệ
            $('#currency-filter').change(function() {
                const allFilterData = getAllFilterData();
                doSearch(1, allFilterData);
                updateSummaryHistory();

                // Gọi API lưu currency mặc định, chú ý tên tham số là currencyCode
                const currency = $(this).val();
                $.post('/Setting/UpdateCurrency', { currencyCode: currency }, function(res) {
                    if(res.success) {
                        // alert('Đã lưu tiền tệ mặc định!');
                    }
                });
            });

            $('#formSearch').submit(function (e) {
                e.preventDefault();
                doSearch(1);
                updateSummaryHistory();
            });

            // Event cho nút mở filter dialog
            $(document).on('click', '[data-bs-target="#filterModal"]', function(e) {
                e.preventDefault();
                if (!filterModal) {
                    loadFilterDialog();
                } else {
                    filterModal.show();
                }
            });

            doSearch(@Model.Page);
            updateSummaryHistory();
        });

        function doSearch(page, additionalData = null) {
            const url = $("#formSearch").prop("action");
            const postData = $("#formSearch").serializeArray();
            postData.push({ "name": "page", "value": page });

            // Thêm dữ liệu filter nếu có
            if (additionalData) {
                for (let key in additionalData) {
                    if (additionalData[key] !== null && additionalData[key] !== undefined && additionalData[key] !== '') {
                        postData.push({ "name": key, "value": additionalData[key] });
                    }
                }
            }

            $.ajax({
                url: url,
                type: "POST",
                data: postData,
                success: function (data) {
                    $("#searchResult").html(data);
                    updateSummaryHistory();
                },
                error: function () {
                    alert("Không thể tải dữ liệu, vui lòng thử lại.");
                }
            });
        }

        function updateFilterBadge(count) {
            var badge = document.getElementById('filterBadge');
            if (badge) {
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                } else {
                    badge.style.display = 'none';
                }
            }
        }
    </script>
}
