@using CSharpSoChiTieu.common
@using CSharpSoChiTieu.Business.Services
@model IncomeExpenseCreateUpdateModel
@{
    Layout = null;
}
@{
    var isIncome = ViewBag.Type?.ToString()?.ToLower() == "income";
    var headerColor = isIncome ? "text-success" : "text-danger";
    var headerIcon = isIncome ? "fa-plus-circle" : "fa-minus-circle";
    var buttonText = isIncome ? "Thêm khoản thu" : "Thêm khoản chi";
    var categoryBtnClass = isIncome ? "btn-success" : "btn-danger";
}

<div class="card mb-4 shadow-sm">
    <div class="card-header pb-2 px-3">
        <h6 class="mb-0 @headerColor">
            <i class="fas @headerIcon me-2"></i>@(ViewBag.Title ?? "Tạo giao dịch mới")
        </h6>
    </div>
    <div class="card-body p-3">
        <form id="incomeExpenseForm" class="needs-validation" novalidate>
            <input type="hidden" name="Type" value="@(isIncome? IncomeExpenseType.Income: IncomeExpenseType.Expense)" />
            <input type="hidden" name="Id" value="@(Model?.Id ?? Guid.Empty)" />

            <div class="d-flex align-items-center mb-3">
                <label for="transaction-date" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Ngày &nbsp; <span class="text-danger">*</span>:</label>
                <div class="input-group input-group-static flex-grow-1">
                    <span class="input-group-text">@* <i class="fas fa-calendar-day"></i> *@</span>
                    <input type="date" class="form-control border-0" id="transaction-date" name="Date" required value="@(Model?.Date == default ? DateTime.UtcNow.ToString("yyyy-MM-dd") : Model.Date.ToString("yyyy-MM-dd"))">
                </div>
            </div>

            <div class="d-flex align-items-center mb-3">
                <label for="transaction-description" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Ghi chú &nbsp; :</label>
                <div class="input-group input-group-static flex-grow-1">
                    <span class="input-group-text"><i class="fas fa-pencil-alt"></i></span>
                    <input type="text" class="form-control" id="transaction-description" name="Description" placeholder="Hãy mô tả khoản @(isIncome ? "thu" : "chi") của mình..." value="@(Model?.Description ?? "")">
                </div>
            </div>

            <div class="d-flex  align-items-center mb-1">
                <label for="transaction-amount" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">
                    Số tiền <span class="text-danger">*</span>:
                </label>

                <div class="input-group border-bottom flex-grow-1">
                    <input type="text"
                           class="form-control fw-bold"
                           id="transaction-amount"
                           name="Amount"
                           placeholder="0"
                           required
                           inputmode="decimal"
                           onkeyup="formatNumber(this)"
                           value="@(Model?.Amount.ToString() ?? "0")" />

                    <select class="form-select @(isIncome ? "bg-success text-white" : "bg-danger text-white") rounded-start-0 custom-select"
                            name="Currency"
                            id="transaction-currency"
                            style="max-width: 90px; text-align: center; text-align-last: center;">
                        @if (ViewBag.Currencies != null)
                        {
                            var selectedCurrency = ViewBag.SelectedCurrency as string;
                            foreach (var currency in (List<CurrencyViewModel>)ViewBag.Currencies)
                            {
                                <option value="@currency.Code" selected="@(currency.Code == selectedCurrency ? "selected" : null)">
                                    @currency.Code
                                </option>
                            }
                        }

                    </select>
                </div>
            </div>


            <div id="IncomeExpenseCateogry"></div>
            <input type="hidden" id="IncomeExpense-category-id" name="CategoryId" value="" required />

            <!-- Thông báo lỗi -->
            <div id="validation-errors" class="text-danger mb-2" style="display: none;"></div>

            <!-- Nút lưu -->
            <button type="submit" class="btn @(isIncome ? "bg-success text-white" : "bg-danger text-white") border w-100 py-2 fw-bold mt-3">
                <i class="fas fa-save me-2"></i> @buttonText
            </button>
        </form>
    </div>
</div>

<style>
    #category-validation-feedback {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        margin-bottom: 10px;
    }

    #validation-errors {
        font-size: 0.875rem;
        line-height: 1.4;
    }

    @@media (max-width: 767.98px) {
        .card-body {
            padding: 0.8rem !important;
        }

        .form-label {
            margin-bottom: 0.25rem !important;
        }
    }

    select.custom-select {
        -webkit-appearance: none; /* Chrome, Safari, Edge */
        -moz-appearance: none; /* Firefox */
        appearance: none;
        padding-left: 0.5rem;
        padding-right: 2.5rem; /* tạo khoảng trống cho icon mới */
        background-image: none; /* ẩn icon mặc định */
        background-color: white; /* màu nền */
    }

    select.custom-select {
        background-image: url('data:image/svg+xml;utf8,<svg fill="white" height="23" viewBox="0 0 24 24" width="23" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 3em;
    }

</style>

<script>
    $(document).ready(function() {
        addDataIE();
        EventDoiMauCategory();
        loadFormCategoryEI("@ViewBag.Type");

        $("#transaction-amount").on('input', function(e) {
            let value = $(this).val().replace(/[^\d]/g, '');
            if (!/^\d*$/.test(value)) {
                $(this).val('');
                return;
            }
            if (value) {
                value = parseInt(value).toLocaleString('vi-VN');
                $(this).val(value);
            }
        });

        $("#transaction-amount").on('paste', function(e) {
            e.preventDefault();
            let pastedText = (e.originalEvent.clipboardData || window.clipboardData).getData('text');
            if (!/^\d*$/.test(pastedText)) {
                return false;
            }
        });

        $("#transaction-currency").on("change", function() {
            var selectedCurrency = $(this).val();
            $.ajax({
                url: '/Setting/UpdateCurrency',
                type: 'POST',
                data: { currencyCode: selectedCurrency },
                success: function(res) {
                    // Sau khi đổi đơn vị tiền tệ, gọi lại loadFormHistory và updateSummary
                    if (typeof loadFormHistory === 'function') {
                        loadFormHistory("@ViewBag.RangeType");
                    }
                    if (typeof updateSummary === 'function') {
                        updateSummary("@ViewBag.RangeType");
                    }
                },
                error: function() {
                    alert('Cập nhật đơn vị tiền tệ thất bại!');
                }
            });
        });
    });

    function loadFormCategoryEI(type) {
        $.ajax({
            url: "/IncomeExpense/Category?type=" + type,
            type: "GET",
            success: function (data) {
                $("#IncomeExpenseCateogry").html(data);
            },
            error: function () {
                alert("Không tải được danh mục.");
            }
        });
    }

    function EventDoiMauCategory() {
        $(document).on("click", ".btn-category", function () {
            var categoryId = $(this).data("category-id");
            $("#IncomeExpense-category-id").val(categoryId);

            $("#category-validation-feedback").hide();
            $("#validation-errors").hide();

            $(".btn-category").removeClass("@(isIncome ? "btn-success" : "btn-danger")").addClass("btn-light");
            $(this).removeClass("btn-light").addClass("@(isIncome ? "btn-success" : "btn-danger")");
        });
    }

    function formatNumber(input) {
        let value = input.value.replace(/[^\d]/g, '');
        value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        input.value = value;
    }

    function addDataIE() {
        $("#incomeExpenseForm").off('submit');

        $("#incomeExpenseForm").on('submit', function (e) {
            e.preventDefault();

            var form = $(this);
            form.removeClass("was-validated");
            $("#validation-errors").hide();

            var categoryId = $("#IncomeExpense-category-id").val();
            var transactionDate = $("#transaction-date").val();
            var transactionAmount = $("#transaction-amount").val();
            var transactionNote = $("#transaction-description").val();
            var transactionId = $("input[name='Id']").val();
            var transactionCurrency = $("#transaction-currency").val();

            var errors = [];

            if (!transactionDate) {
                errors.push("* Bạn chưa nhập ngày.");
            }
            if (!transactionAmount) {
                errors.push("* Bạn chưa nhập số tiền.");
            }
            if (!categoryId) {
                errors.push("* Bạn chưa chọn một danh mục.");
            }

            if (errors.length > 0) {
                var errorMessage = errors.join("<br>");
                $("#validation-errors").html(errorMessage).show();
                return;
            }

            var formData = {
                Id: transactionId,
                Amount: parseFloat(transactionAmount.replace(/\./g, "")),
                Date: transactionDate,
                Description: transactionNote,
                CategoryId: categoryId,
                Type: "@ViewBag.Type",
                Currency: transactionCurrency
            };

            $.ajax({
                url: "@Url.Action("Save", "IncomeExpense")",
                type: "POST",
                data: formData,
                success: function (res) {
                    form.trigger("reset");
                    form.removeClass("was-validated");
                    $("#validation-errors").hide();

                    // Reload form hiện tại
                    if (typeof loadForm === 'function') {
                        loadForm("@ViewBag.Type");
                    }

                    // Gọi các function với range type hiện tại từ parent
                    if (typeof loadFormHistory === 'function') {
                        loadFormHistory("@ViewBag.RangeType");
                    }
                    if (typeof updateSummary === 'function') {
                        updateSummary("@ViewBag.RangeType");
                    }
                },
                error: function (xhr) {
                    form.addClass("was-validated");
                    $(".field-validation-error").remove();
                    $(".is-invalid").removeClass("is-invalid");

                    if (xhr.responseJSON && xhr.responseJSON.errors) {
                        let errors = xhr.responseJSON.errors;
                        for (let key in errors) {
                            let input = $("[name='" + key + "']");
                            if (input.length > 0) {
                                input.addClass("is-invalid");
                                input.after(`<div class="field-validation-error text-danger">${errors[key]}</div>`);
                            }
                        }
                    } else {
                        alert("Có lỗi xảy ra khi lưu dữ liệu.");
                    }
                }
            });
        });
    }
</script>