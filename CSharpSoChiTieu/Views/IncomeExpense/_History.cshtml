@using CSharpSoChiTieu.Business.Services;
@using CSharpSoChiTieu.common;
@model List<IEGroupViewModel>



<div class="card h-100 shadow-sm">

	@* Begin: header *@
	<div class="card-header pb-0 px-3">
		<div class="row align-items-center mb-2">
			<div class="col-6">
				<h6 class="mb-0 text-primary">
					<i class="fas fa-history me-2"></i>Thu chi gần đây
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end">
				<select id="select-range" class="form-select form-select-sm shadow-none" style="border-radius: 0.5rem; min-width: 80px;">
					<option value="today">Hôm nay</option>
					<option value="week">Tuần này</option>
					<option value="month" selected>Tháng này</option>
					<option value="year">Năm này</option>
				</select>
			</div>
		</div>
	</div>
	@* End: header *@


	@* ** Hiển thị danh sách thu chi ** *@
	<div class="card-body pt-2 p-3" style="max-height: 400px; overflow-y: auto;" id="history_id">
		@foreach (var group in Model)
		{
			<label>Ngày @group.Date.ToString("dd/MM/yyyy")</label>
			<div class="income-list-container mb-3">
				<ul class="list-group list-group-flush">
					@foreach (var item in group.Items)
					{
						var amountClass = item.Type == IncomeExpenseType.Income
						? "text-success"
						: "text-danger";

						<li class="list-group-item border-0 d-flex justify-content-between align-items-center ps-1 pe-1 mb-1 income-item"
							data-id="@item.Id"
							data-type="@item.Type"
							data-amount="@item.Amount"
							data-description="@item.Description"
							data-date="@item.Date?.ToString("yyyy-MM-dd")"
							style="cursor: pointer;">
							<div class="d-flex align-items-center">
								<div class="icon icon-shape icon-xs text-center rounded-circle me-2" style="background-color: @item.CategoryColor; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">
									@item.CategoryIcon
								</div>
								<div class="d-flex flex-column text-truncate">
									<h6 class="mb-0 text-dark text-sm">@item.CategoryName</h6>
									<span class="text-xs text-muted">@item.Description</span>
								</div>
							</div>
							<div class="@amountClass text-gradient text-sm fw-bold ms-2 text-nowrap">
								@(item.Type == IncomeExpenseType.Income ? "+" : "-")@item.Amount.ToString("N0") @item.Currency
							</div>
						</li>
					}
				</ul>
			</div>
		}
	</div>


</div>

<!-- Small Action Dialog -->
<div id="actionDialog" class="position-fixed bg-white shadow-sm rounded" style="display: none; z-index: 1000; min-width: 120px;">
	<ul class="list-group list-group-flush">
		<li class="list-group-item py-1 px-2 action-edit" style="cursor: pointer; font-size: 0.875rem;">
			<i class="material-symbols-rounded align-middle me-1" style="font-size: 1rem;">edit</i>
			Chỉnh sửa
		</li>
		<li class="list-group-item py-1 px-2 action-delete" style="cursor: pointer; font-size: 0.875rem;">
			<i class="material-symbols-rounded align-middle me-1" style="font-size: 1rem;">delete</i>
			Xóa
		</li>
	</ul>
</div>

<!-- Modal Dialog -->
<div class="modal fade" id="incomeExpenseModal" tabindex="-1" aria-labelledby="incomeExpenseModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="incomeExpenseModalLabel">Chỉnh sửa</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="incomeExpenseForm">
					<input type="hidden" id="itemId" name="id" />

					<div class="d-flex align-items-center mb-3">
						<label for="income-date" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Ngày <span class="text-danger">*</span></label>
						<div class="input-group input-group-static flex-grow-1">
							<span class="input-group-text"><i class="fas fa-calendar-day"></i></span>
							<input type="date" class="form-control" id="income-date" name="IncomeDate" required value="@DateTime.UtcNow.ToString("yyyy-MM-dd")">
						</div>
					</div>

					@* Ghi chú *@
					<div class="d-flex align-items-center mb-3">
						<label for="income-note" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Ghi chú </label>
						<div class="input-group input-group-static flex-grow-1">
							<span class="input-group-text"><i class="fas fa-pencil-alt"></i></span>
							<input type="text" class="form-control" id="income-note" name="Note" placeholder="Ghi chú">
						</div>
					</div>

					@* Số tiền *@
					<div class="d-flex align-items-center mb-3">
						<label for="income-amount" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Số tiền <span class="text-danger">*</span></label>
						<div class="input-group input-group-static flex-grow-1">
							<input type="text" class="form-control" id="income-amount" name="Amount" placeholder="0" required inputmode="decimal" onkeyup="formatNumber(this)">
							<span class="input-group-text">VNĐ</span>
						</div>
					</div>

					@* <div id="IncomeExpenseCateogry"></div> *@

					<div class="d-flex align-items-center mb-3">
						<label for="income-category" class="form-label small fw-bold mb-0 me-3 text-nowrap flex-shrink-0" style="width: 70px;">Danh mục <span class="text-danger">*</span></label>
						<div class="input-group input-group-static flex-grow-1">
							<select class="form-select" id="income-category" name="CategoryId" required>
								@* <option value="">Chọn danh mục</option> *@
							</select>
						</div>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
				<button type="button" class="btn btn-primary" id="btnSave">Lưu</button>
			</div>
		</div>
	</div>
</div>

<style>
	.action-edit:hover {
		background-color: #f8f9fa;
	}

	.action-delete:hover {
		background-color: #f8f9fa;
		color: #dc3545;
	}

	#actionDialog {
		border: 1px solid rgba(0,0,0,.1);
	}

		#actionDialog .list-group-item {
			border: none;
			border-radius: 0;
		}

			#actionDialog .list-group-item:first-child {
				border-top-left-radius: 0.25rem;
				border-top-right-radius: 0.25rem;
			}

			#actionDialog .list-group-item:last-child {
				border-bottom-left-radius: 0.25rem;
				border-bottom-right-radius: 0.25rem;
			}

	#income-category {
		padding-left: 2.5rem;
	}

		#income-category option {
			padding-left: 2.5rem;
			position: relative;
		}

			#income-category option::before {
				content: attr(data-icon);
				position: absolute;
				left: 0.5rem;
				top: 50%;
				transform: translateY(-50%);
				width: 1.5rem;
				height: 1.5rem;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: var(--category-color);
				border-radius: 50%;
				color: white;
				font-size: 0.875rem;
			}
</style>

<script>
	$(document).ready(function () {
		// Khởi tạo các biến global
		var modal = new bootstrap.Modal(document.getElementById('incomeExpenseModal'));
		var currentItemId = null;
		var actionDialog = $('#actionDialog');
		var currentItem = null;

		// Khởi tạo các event handlers
		initializeEventHandlers();

		// Các function xử lý chính
		function initializeEventHandlers() {
			// Event cho select range
			$("#select-range").change(function () {
				var selectedRange = $(this).val();
				updateSummary(selectedRange);
				getDataHistoryIE(selectedRange);
			});

			// Event cho click vào item
			$(document).on('click', '.income-item', handleItemClick);

			// Event cho click ra ngoài dialog
			$(document).click(function() {
				actionDialog.hide();
			});

			// Event cho nút edit
			$(document).on('click', '.action-edit', handleEditClick);

			// Event cho nút delete
			$(document).on('click', '.action-delete', handleDeleteClick);

			// Event cho nút save trong modal
			$('#btnSave').click(handleSaveClick);

			// Thêm vào phần initializeEventHandlers
			$('#income-amount').on('input', function(e) {
				let value = $(this).val().replace(/[^\d]/g, '');
				if (!/^\d*$/.test(value)) {
					$(this).val('');
					return;
				}
				if (value) {
					value = parseInt(value).toLocaleString('vi-VN');
					$(this).val(value);
				}
			});

			$('#income-amount').on('paste', function(e) {
				e.preventDefault();
				let pastedText = (e.originalEvent.clipboardData || window.clipboardData).getData('text');
				if (!/^\d*$/.test(pastedText)) {
					return false;
				}
			});
		}

		// Function xử lý click vào item
		function handleItemClick(e) {
			e.stopPropagation();
			currentItem = $(this);
			currentItemId = currentItem.data('id');

			// Đóng dialog cũ nếu có
			actionDialog.hide();

			// Tính toán vị trí hiển thị dialog
			var rect = currentItem[0].getBoundingClientRect();
			actionDialog.css({
				'top': rect.bottom + 'px',
				'left': rect.left + 'px',
				'min-width': rect.width + 'px'
			}).show();
		}

		// Function xử lý click nút edit
		function handleEditClick(e) {
			e.stopPropagation();
			actionDialog.hide();

			// Lấy thông tin item hiện tại
			var itemType = currentItem.data('type');
			var itemCategoryId = currentItem.find('.icon').data('category-id');

			// Load danh mục và điền form
			loadCategories(itemType, function() {
				fillEditForm(itemCategoryId);
				modal.show();
			});
		}

		// Function xử lý click nút delete
		function handleDeleteClick(e) {
			e.stopPropagation();
			actionDialog.hide();

			if (confirm('Bạn có chắc chắn muốn xóa khoản này?')) {
				deleteItem(currentItemId);
			}
		}

		// Function xử lý click nút save
		function handleSaveClick() {
			var formData = getFormData();

			if (validateFormData(formData)) {
				saveItem(formData);
			}
		}

		// Function load danh mục
		function loadCategories(type, callback) {
			$.ajax({
				url: "/IncomeExpense/Category?type=" + type,
				type: "GET",
				success: function (data) {
					var categories = $(data).find('.btn-category');
					var select = $('#income-category');

					// Xóa các option cũ
					select.find('option:not(:first)').remove();

					// Thêm các option mới
					categories.each(function() {
						var categoryId = $(this).data('category-id');
						var categoryName = $(this).data('category-name');
						var categoryIcon = $(this).find('.icon span').text();
						var categoryColor = $(this).find('.icon').css('background-color');

						var option = $('<option>', {
							value: categoryId,
							text: categoryName,
							'data-icon': categoryIcon,
							'data-color': categoryColor
						});

						select.append(option);
					});

					if (callback) callback();
				},
				error: function () {
					alert("Không tải được danh mục.");
				}
			});
		}

		// Function điền form edit
		function fillEditForm(categoryId) {
			$('#itemId').val(currentItemId);
			$('#income-date').val(currentItem.data('date'));
			$('#income-note').val(currentItem.data('description'));

				// Sửa lại cách format số tiền
			var amount = currentItem.data('amount');
			// Đảm bảo đây là số nguyên trước khi định dạng
			var integerAmount = parseInt(amount); // Chuyển đổi thành số nguyên, bỏ qua phần thập phân
			var formattedAmount = integerAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
			$('#income-amount').val(formattedAmount);

			$('#income-category').val(categoryId);
		}

		// Function lấy dữ liệu form
		function getFormData() {
			// Lấy số tiền và chuyển đổi format
			var amountStr = $('#income-amount').val().replace(/\./g, '');
			var amount = parseInt(amountStr);

			return {
				Id: $('#itemId').val(),
				Date: $('#income-date').val(),
				Description: $('#income-note').val(),
				Amount: amount,
				CategoryId: $('#income-category').val(),
				Type: currentItem.data('type')
			};
		}

		// Function validate form
		function validateFormData(formData) {
			if (!formData.Date || !formData.Amount || !formData.CategoryId) {
				alert('Vui lòng điền đầy đủ thông tin bắt buộc');
				return false;
			}
			return true;
		}

		// Function lưu item
		function saveItem(formData) {
			$.ajax({
				url: '/IncomeExpense/Save',
				type: 'POST',
				data: formData,
				success: function(response) {
					if (response.success) {
						modal.hide();
						refreshData();
					} else {
						alert(response.message || 'Có lỗi xảy ra khi lưu dữ liệu');
					}
				},
				error: function() {
					alert('Có lỗi xảy ra khi lưu dữ liệu');
				}
			});
		}

		// Function xóa item
		function deleteItem(id) {
			$.ajax({
				url: '/IncomeExpense/Delete',
				type: 'DELETE',
				data: { id: id },
				success: function(response) {
					if (response.success) {
						refreshData();
					} else {
						alert(response.message || 'Có lỗi xảy ra khi xóa dữ liệu');
					}
				},
				error: function() {
					alert('Có lỗi xảy ra khi xóa dữ liệu');
				}
			});
		}

		// Function refresh dữ liệu
		function refreshData() {
			var currentRange = $('#select-range').val();
			getDataHistoryIE(currentRange);
			updateSummary(currentRange);
		}

		// Function lấy dữ liệu history
		function getDataHistoryIE(range) {
			$('#history_id').html('<div class="text-center p-5"><div class="spinner-border text-primary"></div></div>');

			$.ajax({
				url: '/IncomeExpense/History',
				type: 'GET',
				data: { range: range },
				success: function (result) {
					var newContent = $(result).find('#history_id').html();
					$('#history_id').html(newContent);
				},
				error: function () {
					$('#history_id').html('<div class="text-danger text-center p-4">Lỗi khi tải dữ liệu.</div>');
				}
			});
		}

		// Function format số
		function formatNumber(input) {
			let value = input.value.replace(/[^\d]/g, '');
			value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
			input.value = value;
		}
	});
</script>